{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport sunny from '../assets/weather-icons/sunny.png';\nimport cloudy from '../assets/weather-icons/cloudy.png';\nimport rainy from '../assets/weather-icons/rainy.png';\nexport default {\n  name: \"WeatherComponent\",\n  data() {\n    return {\n      city: '',\n      weather: null,\n      unit: 'metric',\n      // Начальная единица — Цельсий\n      favoriteCities: [],\n      weatherIcons: {\n        'ясно': sunny,\n        'облачно': cloudy,\n        'дождь': rainy\n      }\n    };\n  },\n  computed: {\n    weatherIcon() {\n      return this.weather ? this.weatherIcons[this.weather.weather] || sunny : null;\n    }\n  },\n  methods: {\n    async fetchWeather() {\n      try {\n        const response = await axios.post('http://localhost:5000/weather', {\n          city: this.city,\n          unit: this.unit // Передаем текущую единицу измерения\n        });\n        this.weather = response.data;\n      } catch (error) {\n        console.error('Ошибка получения погоды:', error);\n      }\n    },\n    updateUnit() {\n      // При изменении единицы измерения делаем новый запрос\n      if (this.weather) {\n        this.fetchWeather();\n      }\n    },\n    refreshWeather() {\n      if (this.weather) {\n        this.fetchWeather();\n      }\n    },\n    addFavoriteCity() {\n      if (!this.favoriteCities.includes(this.city)) {\n        this.favoriteCities.push(this.city);\n        localStorage.setItem('favoriteCities', JSON.stringify(this.favoriteCities));\n      }\n    },\n    loadFavoriteCities() {\n      const cities = JSON.parse(localStorage.getItem('favoriteCities'));\n      if (cities) {\n        this.favoriteCities = cities;\n      }\n    }\n  },\n  mounted() {\n    this.loadFavoriteCities();\n  }\n};","map":{"version":3,"names":["axios","sunny","cloudy","rainy","name","data","city","weather","unit","favoriteCities","weatherIcons","computed","weatherIcon","methods","fetchWeather","response","post","error","console","updateUnit","refreshWeather","addFavoriteCity","includes","push","localStorage","setItem","JSON","stringify","loadFavoriteCities","cities","parse","getItem","mounted"],"sources":["C:\\Users\\vladik\\weather-app\\client\\src\\components\\WeatherComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"weather-app container mt-5\">\r\n    <h1 class=\"text-center mb-4\">Погода в городе</h1>\r\n    <form @submit.prevent=\"fetchWeather\" class=\"form-inline justify-content-center mb-4\">\r\n      <input\r\n        type=\"text\"\r\n        v-model=\"city\"\r\n        placeholder=\"Введите название города\"\r\n        required\r\n        class=\"form-control mr-2\"\r\n      />\r\n      <select v-model=\"unit\" @change=\"updateUnit\" class=\"form-control mr-2\">\r\n        <option value=\"metric\">Цельсий</option>\r\n        <option value=\"imperial\">Фаренгейт</option>\r\n      </select>\r\n      <button type=\"submit\" class=\"btn btn-primary\">Получить погоду</button>\r\n    </form>\r\n    <button @click=\"refreshWeather\" class=\"btn btn-secondary mb-4\">Обновить</button>\r\n\r\n    <div v-if=\"weather\" class=\"weather-info card text-center p-4\">\r\n      <h2>{{ weather.city }}</h2>\r\n      <img :src=\"weatherIcon\" alt=\"Weather icon\" class=\"weather-icon\"/>\r\n      <p class=\"temperature\">\r\n        Температура: <span class=\"font-weight-bold\">{{ weather.temperature }} °{{ unit === 'metric' ? 'C' : 'F' }}</span>\r\n      </p>\r\n      <p>Описание: {{ weather.weather }}</p>\r\n      <p>Время получения: {{ new Date(weather.timestamp).toLocaleString() }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport sunny from '../assets/weather-icons/sunny.png';\r\nimport cloudy from '../assets/weather-icons/cloudy.png';\r\nimport rainy from '../assets/weather-icons/rainy.png';\r\n\r\nexport default {\r\n  name: \"WeatherComponent\",\r\n  data() {\r\n    return {\r\n      city: '',\r\n      weather: null,\r\n      unit: 'metric', // Начальная единица — Цельсий\r\n      favoriteCities: [],\r\n      weatherIcons: {\r\n        'ясно': sunny,\r\n        'облачно': cloudy,\r\n        'дождь': rainy,\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    weatherIcon() {\r\n      return this.weather ? this.weatherIcons[this.weather.weather] || sunny : null;\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchWeather() {\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/weather', {\r\n          city: this.city,\r\n          unit: this.unit, // Передаем текущую единицу измерения\r\n        });\r\n        this.weather = response.data;\r\n      } catch (error) {\r\n        console.error('Ошибка получения погоды:', error);\r\n      }\r\n    },\r\n    updateUnit() {\r\n      // При изменении единицы измерения делаем новый запрос\r\n      if (this.weather) {\r\n        this.fetchWeather();\r\n      }\r\n    },\r\n    refreshWeather() {\r\n      if (this.weather) {\r\n        this.fetchWeather();\r\n      }\r\n    },\r\n    addFavoriteCity() {\r\n      if (!this.favoriteCities.includes(this.city)) {\r\n        this.favoriteCities.push(this.city);\r\n        localStorage.setItem('favoriteCities', JSON.stringify(this.favoriteCities));\r\n      }\r\n    },\r\n    loadFavoriteCities() {\r\n      const cities = JSON.parse(localStorage.getItem('favoriteCities'));\r\n      if (cities) {\r\n        this.favoriteCities = cities;\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadFavoriteCities();\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";AAgCA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,KAAI,MAAO,mCAAmC;AACrD,OAAOC,MAAK,MAAO,oCAAoC;AACvD,OAAOC,KAAI,MAAO,mCAAmC;AAErD,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,QAAQ;MAAE;MAChBC,cAAc,EAAE,EAAE;MAClBC,YAAY,EAAE;QACZ,MAAM,EAAET,KAAK;QACb,SAAS,EAAEC,MAAM;QACjB,OAAO,EAAEC;MACX;IACF,CAAC;EACH,CAAC;EACDQ,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACL,OAAM,GAAI,IAAI,CAACG,YAAY,CAAC,IAAI,CAACH,OAAO,CAACA,OAAO,KAAKN,KAAI,GAAI,IAAI;IAC/E;EACF,CAAC;EACDY,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMf,KAAK,CAACgB,IAAI,CAAC,+BAA+B,EAAE;UACjEV,IAAI,EAAE,IAAI,CAACA,IAAI;UACfE,IAAI,EAAE,IAAI,CAACA,IAAI,CAAE;QACnB,CAAC,CAAC;QACF,IAAI,CAACD,OAAM,GAAIQ,QAAQ,CAACV,IAAI;MAC9B,EAAE,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACDE,UAAUA,CAAA,EAAG;MACX;MACA,IAAI,IAAI,CAACZ,OAAO,EAAE;QAChB,IAAI,CAACO,YAAY,CAAC,CAAC;MACrB;IACF,CAAC;IACDM,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACb,OAAO,EAAE;QAChB,IAAI,CAACO,YAAY,CAAC,CAAC;MACrB;IACF,CAAC;IACDO,eAAeA,CAAA,EAAG;MAChB,IAAI,CAAC,IAAI,CAACZ,cAAc,CAACa,QAAQ,CAAC,IAAI,CAAChB,IAAI,CAAC,EAAE;QAC5C,IAAI,CAACG,cAAc,CAACc,IAAI,CAAC,IAAI,CAACjB,IAAI,CAAC;QACnCkB,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAClB,cAAc,CAAC,CAAC;MAC7E;IACF,CAAC;IACDmB,kBAAkBA,CAAA,EAAG;MACnB,MAAMC,MAAK,GAAIH,IAAI,CAACI,KAAK,CAACN,YAAY,CAACO,OAAO,CAAC,gBAAgB,CAAC,CAAC;MACjE,IAAIF,MAAM,EAAE;QACV,IAAI,CAACpB,cAAa,GAAIoB,MAAM;MAC9B;IACF;EACF,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACJ,kBAAkB,CAAC,CAAC;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}