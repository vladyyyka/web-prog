{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport sunny from '../assets/weather-icons/sunny.png';\nimport cloudy from '../assets/weather-icons/cloudy.png';\nimport rainy from '../assets/weather-icons/rainy.png';\nimport snow from '../assets/weather-icons/snow.png';\nimport fog from '../assets/weather-icons/fog.png';\nimport unknown from '../assets/weather-icons/unknown.png';\nexport default {\n  name: \"WeatherComponent\",\n  data() {\n    return {\n      city: '',\n      weather: null,\n      unit: 'metric',\n      weatherIcons: {\n        'ясно': sunny,\n        'облачно': cloudy,\n        'пасмурно': cloudy,\n        'дождь': rainy,\n        'ливень': rainy,\n        'снег': snow,\n        'туман': fog\n      },\n      favorites: JSON.parse(localStorage.getItem('favorites')) || []\n    };\n  },\n  computed: {\n    weatherIcon() {\n      return this.weather ? this.weatherIcons[this.weather.overcast] || unknown : null;\n    }\n  },\n  methods: {\n    async fetchWeather() {\n      try {\n        const response = await axios.post('http://localhost:5000/weather', {\n          city: this.city,\n          unit: this.unit\n        });\n        this.weather = response.data;\n      } catch (error) {\n        console.error('Ошибка получения погоды:', error);\n      }\n    },\n    async fetchFavoriteWeather(favorite) {\n      this.city = favorite; // Устанавливаем город для отображения\n      await this.fetchWeather(); // Получаем погоду для избранного города\n    },\n    toggleFavorite(city) {\n      const index = this.favorites.indexOf(city);\n      if (index === -1) {\n        this.favorites.push(city);\n      } else {\n        this.favorites.splice(index, 1);\n      }\n      localStorage.setItem('favorites', JSON.stringify(this.favorites));\n    },\n    isFavorite(city) {\n      return this.favorites.includes(city);\n    },\n    removeFromFavorites(index) {\n      this.favorites.splice(index, 1);\n      localStorage.setItem('favorites', JSON.stringify(this.favorites));\n    }\n  }\n};","map":{"version":3,"names":["axios","sunny","cloudy","rainy","snow","fog","unknown","name","data","city","weather","unit","weatherIcons","favorites","JSON","parse","localStorage","getItem","computed","weatherIcon","overcast","methods","fetchWeather","response","post","error","console","fetchFavoriteWeather","favorite","toggleFavorite","index","indexOf","push","splice","setItem","stringify","isFavorite","includes","removeFromFavorites"],"sources":["C:\\Users\\vladik\\weather-app\\client\\src\\components\\WeatherComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"weather-app container mt-5\">\r\n    <h1 class=\"text-center mb-4\">Погода в городе</h1>\r\n    \r\n    <div class=\"search-container text-center mb-4\">\r\n      <form @submit.prevent=\"fetchWeather\" class=\"form-inline justify-content-center\">\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"city\"\r\n          placeholder=\"Введите город\"\r\n          required\r\n          class=\"form-control city-input\"\r\n        />\r\n        <div class=\"unit-toggle\">\r\n          <label class=\"btn\" :class=\"{ active: unit === 'metric' }\" @click=\"unit = 'metric'\">°C</label>\r\n          <label class=\"btn\" :class=\"{ active: unit === 'imperial' }\" @click=\"unit = 'imperial'\">°F</label>\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-primary search-button\">\r\n          <i class=\"fas fa-search\"></i>\r\n        </button>\r\n      </form>\r\n    </div>\r\n\r\n    <div v-if=\"weather\" class=\"weather-info card text-center p-4 animated-fade-in mb-4 position-relative\">\r\n      <h2>{{ weather.city }}</h2>\r\n      <i \r\n        class=\"fas fa-star position-absolute star-icon\"\r\n        :class=\"{ 'star-filled': isFavorite(weather.city) }\"\r\n        @click=\"toggleFavorite(weather.city)\"\r\n        style=\"cursor: pointer;\"\r\n      ></i>\r\n      <div class=\"weather-content d-flex justify-content-between align-items-center\">\r\n        <div class=\"left-info\">\r\n          <p class=\"temperature\">\r\n            Температура: <span class=\"font-weight-bold\">{{ weather.temperature }} °{{ unit === 'metric' ? 'C' : 'F' }}</span>\r\n          </p>\r\n          <p>Описание: {{ weather.overcast }}</p>\r\n          <p>Влажность: {{ weather.humidity }}%</p>\r\n          <p>Скорость ветра: {{ weather.wind }} м/с</p>\r\n        </div>\r\n        \r\n        <div class=\"icon-container mx-3\">\r\n          <img :src=\"weatherIcon\" alt=\"Weather icon\" class=\"weather-icon animated-icon\" />\r\n        </div>\r\n        \r\n        <div class=\"right-info\">\r\n          <p>Время восхода: {{ new Date(weather.sunrise * 1000).toLocaleTimeString() }}</p>\r\n          <p>Время заката: {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</p>\r\n          <p>Время получения: {{ new Date(weather.timestamp).toLocaleString() }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"favorites-list\">\r\n      <h2>Избранные города</h2>\r\n      <ul>\r\n        <li v-for=\"(favorite, index) in favorites\" :key=\"index\" class=\"favorite-item\">\r\n          <button @click=\"fetchFavoriteWeather(favorite)\" class=\"btn btn-link\">\r\n            {{ favorite }}\r\n          </button>\r\n          <button @click=\"removeFromFavorites(index)\" class=\"btn btn-danger btn-sm\">Удалить</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport sunny from '../assets/weather-icons/sunny.png';\r\nimport cloudy from '../assets/weather-icons/cloudy.png';\r\nimport rainy from '../assets/weather-icons/rainy.png';\r\nimport snow from '../assets/weather-icons/snow.png';\r\nimport fog from '../assets/weather-icons/fog.png';\r\nimport unknown from '../assets/weather-icons/unknown.png';\r\n\r\nexport default {\r\n  name: \"WeatherComponent\",\r\n  data() {\r\n    return {\r\n      city: '',\r\n      weather: null,\r\n      unit: 'metric',\r\n      weatherIcons: {\r\n        'ясно': sunny,\r\n        'облачно': cloudy,\r\n        'пасмурно': cloudy,\r\n        'дождь': rainy,\r\n        'ливень': rainy,\r\n        'снег': snow,\r\n        'туман': fog,\r\n      },\r\n      favorites: JSON.parse(localStorage.getItem('favorites')) || [],\r\n    };\r\n  },\r\n  computed: {\r\n    weatherIcon() {\r\n      return this.weather ? this.weatherIcons[this.weather.overcast] || unknown : null;\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchWeather() {\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/weather', {\r\n          city: this.city,\r\n          unit: this.unit,\r\n        });\r\n        this.weather = response.data;\r\n      } catch (error) {\r\n        console.error('Ошибка получения погоды:', error);\r\n      }\r\n    },\r\n    async fetchFavoriteWeather(favorite) {\r\n      this.city = favorite; // Устанавливаем город для отображения\r\n      await this.fetchWeather(); // Получаем погоду для избранного города\r\n    },\r\n    toggleFavorite(city) {\r\n      const index = this.favorites.indexOf(city);\r\n      if (index === -1) {\r\n        this.favorites.push(city);\r\n      } else {\r\n        this.favorites.splice(index, 1);\r\n      }\r\n      localStorage.setItem('favorites', JSON.stringify(this.favorites));\r\n    },\r\n    isFavorite(city) {\r\n      return this.favorites.includes(city);\r\n    },\r\n    removeFromFavorites(index) {\r\n      this.favorites.splice(index, 1);\r\n      localStorage.setItem('favorites', JSON.stringify(this.favorites));\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.weather-info {\r\n  position: relative; /* Позволяет позиционировать звезду относительно этого блока */\r\n}\r\n\r\n.star-icon {\r\n  position: absolute;\r\n  top: 10px; /* Расстояние от верхней части */\r\n  right: 10px; /* Расстояние от правой части */\r\n  font-size: 24px; /* Размер звезды */\r\n}\r\n\r\n.star-filled {\r\n  color: gold; /* Цвет заполненной звезды */\r\n}\r\n\r\n.weather-content {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.left-info, .right-info {\r\n  flex: 1; /* Обеспечивает равную ширину для левой и правой информации */\r\n}\r\n\r\n.icon-container {\r\n  display: flex;\r\n  justify-content: center; /* Центрируем изображение */\r\n}\r\n\r\n.weather-icon {\r\n  width: 80px; /* Размер иконки погоды, измените по желанию */\r\n  height: auto; /* Сохраняем пропорции изображения */\r\n}\r\n</style>\r\n"],"mappings":";AAoEA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,KAAI,MAAO,mCAAmC;AACrD,OAAOC,MAAK,MAAO,oCAAoC;AACvD,OAAOC,KAAI,MAAO,mCAAmC;AACrD,OAAOC,IAAG,MAAO,kCAAkC;AACnD,OAAOC,GAAE,MAAO,iCAAiC;AACjD,OAAOC,OAAM,MAAO,qCAAqC;AAEzD,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,QAAQ;MACdC,YAAY,EAAE;QACZ,MAAM,EAAEX,KAAK;QACb,SAAS,EAAEC,MAAM;QACjB,UAAU,EAAEA,MAAM;QAClB,OAAO,EAAEC,KAAK;QACd,QAAQ,EAAEA,KAAK;QACf,MAAM,EAAEC,IAAI;QACZ,OAAO,EAAEC;MACX,CAAC;MACDQ,SAAS,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK;IAC9D,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACT,OAAM,GAAI,IAAI,CAACE,YAAY,CAAC,IAAI,CAACF,OAAO,CAACU,QAAQ,KAAKd,OAAM,GAAI,IAAI;IAClF;EACF,CAAC;EACDe,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMvB,KAAK,CAACwB,IAAI,CAAC,+BAA+B,EAAE;UACjEf,IAAI,EAAE,IAAI,CAACA,IAAI;UACfE,IAAI,EAAE,IAAI,CAACA;QACb,CAAC,CAAC;QACF,IAAI,CAACD,OAAM,GAAIa,QAAQ,CAACf,IAAI;MAC9B,EAAE,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACD,MAAME,oBAAoBA,CAACC,QAAQ,EAAE;MACnC,IAAI,CAACnB,IAAG,GAAImB,QAAQ,EAAE;MACtB,MAAM,IAAI,CAACN,YAAY,CAAC,CAAC,EAAE;IAC7B,CAAC;IACDO,cAAcA,CAACpB,IAAI,EAAE;MACnB,MAAMqB,KAAI,GAAI,IAAI,CAACjB,SAAS,CAACkB,OAAO,CAACtB,IAAI,CAAC;MAC1C,IAAIqB,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,CAACjB,SAAS,CAACmB,IAAI,CAACvB,IAAI,CAAC;MAC3B,OAAO;QACL,IAAI,CAACI,SAAS,CAACoB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MACjC;MACAd,YAAY,CAACkB,OAAO,CAAC,WAAW,EAAEpB,IAAI,CAACqB,SAAS,CAAC,IAAI,CAACtB,SAAS,CAAC,CAAC;IACnE,CAAC;IACDuB,UAAUA,CAAC3B,IAAI,EAAE;MACf,OAAO,IAAI,CAACI,SAAS,CAACwB,QAAQ,CAAC5B,IAAI,CAAC;IACtC,CAAC;IACD6B,mBAAmBA,CAACR,KAAK,EAAE;MACzB,IAAI,CAACjB,SAAS,CAACoB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MAC/Bd,YAAY,CAACkB,OAAO,CAAC,WAAW,EAAEpB,IAAI,CAACqB,SAAS,CAAC,IAAI,CAACtB,SAAS,CAAC,CAAC;IACnE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}