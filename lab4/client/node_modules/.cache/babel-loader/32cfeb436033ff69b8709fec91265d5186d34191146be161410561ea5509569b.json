{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", null, \"Погода в городе\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.fetchWeather && $options.fetchWeather(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.city = $event),\n    placeholder: \"Введите название города\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.city]]), _cache[5] || (_cache[5] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Получить погоду\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.unit = $event)\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"option\", {\n    value: \"metric\"\n  }, \"Цельсий\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"imperial\"\n  }, \"Фаренгейт\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.unit]])], 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.refreshWeather && $options.refreshWeather(...args))\n  }, \"Обновить\"), $data.weather ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, _toDisplayString($data.weather.city), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Температура: \" + _toDisplayString($data.weather.temperature) + \" °\" + _toDisplayString($data.unit === 'metric' ? 'C' : 'F'), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Описание: \" + _toDisplayString($data.weather.weather), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Время получения: \" + _toDisplayString(new Date($data.weather.timestamp).toLocaleString()), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","fetchWeather","type","$event","$data","city","placeholder","required","unit","value","onClick","refreshWeather","weather","_hoisted_1","_toDisplayString","temperature","Date","timestamp","toLocaleString","_createCommentVNode"],"sources":["C:\\Users\\vladik\\weather-app\\client\\src\\components\\WeatherComponent.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Погода в городе</h1>\r\n    <form @submit.prevent=\"fetchWeather\">\r\n      <input type=\"text\" v-model=\"city\" placeholder=\"Введите название города\" required />\r\n      <button type=\"submit\">Получить погоду</button>\r\n      <select v-model=\"unit\">\r\n        <option value=\"metric\">Цельсий</option>\r\n        <option value=\"imperial\">Фаренгейт</option>\r\n      </select>\r\n    </form>\r\n    <button @click=\"refreshWeather\">Обновить</button>\r\n\r\n    <div v-if=\"weather\">\r\n      <h2>{{ weather.city }}</h2>\r\n      <p>Температура: {{ weather.temperature }} °{{ unit === 'metric' ? 'C' : 'F' }}</p>\r\n      <p>Описание: {{ weather.weather }}</p>\r\n      <p>Время получения: {{ new Date(weather.timestamp).toLocaleString() }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: \"WeatherComponent\",\r\n  data() {\r\n    return {\r\n      city: '',\r\n      weather: null,\r\n      unit: 'metric',\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchWeather() {\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/weather', {\r\n          city: this.city,\r\n        });\r\n        this.weather = response.data;\r\n      } catch (error) {\r\n        console.error('Ошибка получения погоды:', error);\r\n      }\r\n    },\r\n    refreshWeather() {\r\n      if (this.weather) {\r\n        this.fetchWeather();\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Добавьте стили по своему усмотрению */\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAkBM,c,0BAjBJC,mBAAA,CAAwB,YAApB,iBAAe,sBACnBA,mBAAA,CAOO;IAPAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;sBACjCJ,mBAAA,CAAmF;IAA5EO,IAAI,EAAC,MAAM;IAJxB,uBAAAL,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAIkCC,KAAA,CAAAC,IAAI,GAAAF,MAAA;IAAEG,WAAW,EAAC,yBAAyB;IAACC,QAAQ,EAAR;iDAA5CH,KAAA,CAAAC,IAAI,E,6BAChCV,mBAAA,CAA8C;IAAtCO,IAAI,EAAC;EAAQ,GAAC,iBAAe,sB,gBACrCP,mBAAA,CAGS;IATf,uBAAAE,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAMuBC,KAAA,CAAAI,IAAI,GAAAL,MAAA;gCACnBR,mBAAA,CAAuC;IAA/Bc,KAAK,EAAC;EAAQ,GAAC,SAAO,qBAC9Bd,mBAAA,CAA2C;IAAnCc,KAAK,EAAC;EAAU,GAAC,WAAS,oB,2CAFnBL,KAAA,CAAAI,IAAI,E,8BAKvBb,mBAAA,CAAiD;IAAxCe,OAAK,EAAAb,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAW,cAAA,IAAAX,QAAA,CAAAW,cAAA,IAAAZ,IAAA,CAAc;KAAE,UAAQ,GAE7BK,KAAA,CAAAQ,OAAO,I,cAAlBlB,mBAAA,CAKM,OAlBVmB,UAAA,GAcMlB,mBAAA,CAA2B,YAAAmB,gBAAA,CAApBV,KAAA,CAAAQ,OAAO,CAACP,IAAI,kBACnBV,mBAAA,CAAkF,WAA/E,eAAa,GAAAmB,gBAAA,CAAGV,KAAA,CAAAQ,OAAO,CAACG,WAAW,IAAG,IAAE,GAAAD,gBAAA,CAAGV,KAAA,CAAAI,IAAI,2CAClDb,mBAAA,CAAsC,WAAnC,YAAU,GAAAmB,gBAAA,CAAGV,KAAA,CAAAQ,OAAO,CAACA,OAAO,kBAC/BjB,mBAAA,CAA0E,WAAvE,mBAAiB,GAAAmB,gBAAA,KAAOE,IAAI,CAACZ,KAAA,CAAAQ,OAAO,CAACK,SAAS,EAAEC,cAAc,mB,KAjBvEC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}