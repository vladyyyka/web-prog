{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport sunny from '../assets/weather-icons/sunny.png';\nimport cloudy from '../assets/weather-icons/cloudy.png';\nimport rainy from '../assets/weather-icons/rainy.png';\nimport snow from '../assets/weather-icons/snow.png';\nimport fog from '../assets/weather-icons/fog.png';\nimport unknown from '../assets/weather-icons/unknown.png';\nexport default {\n  name: \"WeatherComponent\",\n  data() {\n    return {\n      city: '',\n      weather: null,\n      unit: 'metric',\n      weatherIcons: {\n        'ясно': sunny,\n        'облачно': cloudy,\n        'пасмурно': cloudy,\n        'дождь': rainy,\n        'ливень': rainy,\n        'снег': snow,\n        'туман': fog\n      },\n      favorites: JSON.parse(localStorage.getItem('favorites')) || []\n    };\n  },\n  computed: {\n    weatherIcon() {\n      return this.weather ? this.weatherIcons[this.weather.weather] || unknown : null;\n    }\n  },\n  methods: {\n    async fetchWeather() {\n      try {\n        const response = await axios.post('http://localhost:5000/weather', {\n          city: this.city,\n          unit: this.unit\n        });\n        this.weather = response.data;\n      } catch (error) {\n        console.error('Ошибка получения погоды:', error);\n      }\n    },\n    async fetchFavoriteWeather(favorite) {\n      this.city = favorite; // Устанавливаем город для отображения\n      await this.fetchWeather(); // Получаем погоду для избранного города\n    },\n    addToFavorites() {\n      if (this.city && !this.favorites.includes(this.city)) {\n        this.favorites.push(this.city);\n        localStorage.setItem('favorites', JSON.stringify(this.favorites));\n      }\n    },\n    removeFromFavorites(index) {\n      this.favorites.splice(index, 1);\n      localStorage.setItem('favorites', JSON.stringify(this.favorites));\n    }\n  }\n};","map":{"version":3,"names":["axios","sunny","cloudy","rainy","snow","fog","unknown","name","data","city","weather","unit","weatherIcons","favorites","JSON","parse","localStorage","getItem","computed","weatherIcon","methods","fetchWeather","response","post","error","console","fetchFavoriteWeather","favorite","addToFavorites","includes","push","setItem","stringify","removeFromFavorites","index","splice"],"sources":["C:\\Users\\vladik\\weather-app\\client\\src\\components\\WeatherComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"weather-app container mt-5\">\r\n    <h1 class=\"text-center mb-4\">Погода в городе</h1>\r\n    \r\n    <div class=\"search-container text-center mb-4\">\r\n      <form @submit.prevent=\"fetchWeather\" class=\"form-inline justify-content-center\">\r\n        <div class=\"input-group\">\r\n          <input\r\n            type=\"text\"\r\n            v-model=\"city\"\r\n            placeholder=\"Введите город\"\r\n            required\r\n            class=\"form-control city-input\"\r\n          />\r\n          <select v-model=\"unit\" @change=\"fetchWeather\" class=\"form-control unit-select\">\r\n            <option value=\"metric\">°C</option>\r\n            <option value=\"imperial\">°F</option>\r\n          </select>\r\n          <div class=\"input-group-append\">\r\n            <button type=\"submit\" class=\"btn btn-primary search-button\">\r\n              <i class=\"fas fa-search\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <button @click=\"addToFavorites\" class=\"btn btn-success mt-2\">Добавить в избранное</button>\r\n    </div>\r\n\r\n    <div v-if=\"weather\" class=\"weather-info card text-center p-4 animated-fade-in mb-4\">\r\n      <h2>{{ weather.city }}</h2>\r\n      <div class=\"icon-container\">\r\n        <img :src=\"weatherIcon\" alt=\"Weather icon\" class=\"weather-icon animated-icon\" />\r\n      </div>\r\n      <p class=\"temperature\">\r\n        Температура: <span class=\"font-weight-bold\">{{ weather.temperature }} °{{ unit === 'metric' ? 'C' : 'F' }}</span>\r\n      </p>\r\n      <p>Описание: {{ weather.weather }}</p>\r\n      <p>Время восхода: {{ new Date(weather.sunrise * 1000).toLocaleTimeString() }}</p>\r\n      <p>Время заката: {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</p>\r\n      <p>Давление: {{ weather.pressure }} гПа</p>\r\n      <p>Влажность: {{ weather.humidity }}%</p>\r\n      <p>Скорость ветра: {{ weather.wind }} м/с</p>\r\n      <p>Облачность: {{ weather.overcast }}</p>\r\n      <p>Время получения: {{ new Date(weather.timestamp).toLocaleString() }}</p>\r\n    </div>\r\n\r\n    <div class=\"favorites-list\">\r\n      <h2>Избранные города</h2>\r\n      <ul>\r\n        <li v-for=\"(favorite, index) in favorites\" :key=\"index\">\r\n          <button @click=\"fetchFavoriteWeather(favorite)\" class=\"btn btn-link\">\r\n            {{ favorite }}\r\n          </button>\r\n          <button @click=\"removeFromFavorites(index)\" class=\"btn btn-danger btn-sm\">Удалить</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport sunny from '../assets/weather-icons/sunny.png';\r\nimport cloudy from '../assets/weather-icons/cloudy.png';\r\nimport rainy from '../assets/weather-icons/rainy.png';\r\nimport snow from '../assets/weather-icons/snow.png';\r\nimport fog from '../assets/weather-icons/fog.png';\r\nimport unknown from '../assets/weather-icons/unknown.png';\r\n\r\nexport default {\r\n  name: \"WeatherComponent\",\r\n  data() {\r\n    return {\r\n      city: '',\r\n      weather: null,\r\n      unit: 'metric',\r\n      weatherIcons: {\r\n        'ясно': sunny,\r\n        'облачно': cloudy,\r\n        'пасмурно': cloudy,\r\n        'дождь': rainy,\r\n        'ливень': rainy,\r\n        'снег': snow,\r\n        'туман': fog,\r\n      },\r\n      favorites: JSON.parse(localStorage.getItem('favorites')) || [],\r\n    };\r\n  },\r\n  computed: {\r\n    weatherIcon() {\r\n      return this.weather ? this.weatherIcons[this.weather.weather] || unknown : null;\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchWeather() {\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/weather', {\r\n          city: this.city,\r\n          unit: this.unit,\r\n        });\r\n        this.weather = response.data;\r\n      } catch (error) {\r\n        console.error('Ошибка получения погоды:', error);\r\n      }\r\n    },\r\n    async fetchFavoriteWeather(favorite) {\r\n      this.city = favorite; // Устанавливаем город для отображения\r\n      await this.fetchWeather(); // Получаем погоду для избранного города\r\n    },\r\n    addToFavorites() {\r\n      if (this.city && !this.favorites.includes(this.city)) {\r\n        this.favorites.push(this.city);\r\n        localStorage.setItem('favorites', JSON.stringify(this.favorites));\r\n      }\r\n    },\r\n    removeFromFavorites(index) {\r\n      this.favorites.splice(index, 1);\r\n      localStorage.setItem('favorites', JSON.stringify(this.favorites));\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.city-input {\r\n  width: 200px; /* ширина поля ввода */\r\n}\r\n\r\n.unit-select {\r\n  width: 100px; /* ширина селектора градусов */\r\n}\r\n\r\n.search-button {\r\n  margin-left: 5px; /* расстояние между селектором и кнопкой */\r\n}\r\n\r\n.favorites-list {\r\n  margin-top: 20px; /* расстояние сверху списка избранных городов */\r\n}\r\n\r\n.favorites-list h2 {\r\n  margin-bottom: 10px; /* расстояние снизу заголовка избранных городов */\r\n}\r\n\r\n.weather-info {\r\n  background-color: #f8f9fa; /* фоновый цвет блока с погодой */\r\n  border-radius: 5px; /* скругление углов */\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* тень для блока */\r\n}\r\n\r\n.weather-icon {\r\n  width: 50px; /* ширина иконки погоды */\r\n  height: 50px; /* высота иконки погоды */\r\n}\r\n\r\n.animated-fade-in {\r\n  animation: fadeIn 0.5s; /* анимация появления */\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0; /* начальная прозрачность */\r\n  }\r\n  to {\r\n    opacity: 1; /* конечная прозрачность */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";AA6DA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,KAAI,MAAO,mCAAmC;AACrD,OAAOC,MAAK,MAAO,oCAAoC;AACvD,OAAOC,KAAI,MAAO,mCAAmC;AACrD,OAAOC,IAAG,MAAO,kCAAkC;AACnD,OAAOC,GAAE,MAAO,iCAAiC;AACjD,OAAOC,OAAM,MAAO,qCAAqC;AAEzD,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,QAAQ;MACdC,YAAY,EAAE;QACZ,MAAM,EAAEX,KAAK;QACb,SAAS,EAAEC,MAAM;QACjB,UAAU,EAAEA,MAAM;QAClB,OAAO,EAAEC,KAAK;QACd,QAAQ,EAAEA,KAAK;QACf,MAAM,EAAEC,IAAI;QACZ,OAAO,EAAEC;MACX,CAAC;MACDQ,SAAS,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK;IAC9D,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACT,OAAM,GAAI,IAAI,CAACE,YAAY,CAAC,IAAI,CAACF,OAAO,CAACA,OAAO,KAAKJ,OAAM,GAAI,IAAI;IACjF;EACF,CAAC;EACDc,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMtB,KAAK,CAACuB,IAAI,CAAC,+BAA+B,EAAE;UACjEd,IAAI,EAAE,IAAI,CAACA,IAAI;UACfE,IAAI,EAAE,IAAI,CAACA;QACb,CAAC,CAAC;QACF,IAAI,CAACD,OAAM,GAAIY,QAAQ,CAACd,IAAI;MAC9B,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACD,MAAME,oBAAoBA,CAACC,QAAQ,EAAE;MACnC,IAAI,CAAClB,IAAG,GAAIkB,QAAQ,EAAE;MACtB,MAAM,IAAI,CAACN,YAAY,CAAC,CAAC,EAAE;IAC7B,CAAC;IACDO,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACnB,IAAG,IAAK,CAAC,IAAI,CAACI,SAAS,CAACgB,QAAQ,CAAC,IAAI,CAACpB,IAAI,CAAC,EAAE;QACpD,IAAI,CAACI,SAAS,CAACiB,IAAI,CAAC,IAAI,CAACrB,IAAI,CAAC;QAC9BO,YAAY,CAACe,OAAO,CAAC,WAAW,EAAEjB,IAAI,CAACkB,SAAS,CAAC,IAAI,CAACnB,SAAS,CAAC,CAAC;MACnE;IACF,CAAC;IACDoB,mBAAmBA,CAACC,KAAK,EAAE;MACzB,IAAI,CAACrB,SAAS,CAACsB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;MAC/BlB,YAAY,CAACe,OAAO,CAAC,WAAW,EAAEjB,IAAI,CAACkB,SAAS,CAAC,IAAI,CAACnB,SAAS,CAAC,CAAC;IACnE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}